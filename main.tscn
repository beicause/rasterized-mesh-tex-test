[gd_scene load_steps=21 format=3 uid="uid://2bfqeuhf8nf"]

[ext_resource type="Texture2D" uid="uid://cgsqdtqsi5l4x" path="res://textures/texture3.tres" id="1_7mycd"]
[ext_resource type="PackedScene" uid="uid://4nhaam2rmekj" path="res://node_3d.tscn" id="1_lquwl"]
[ext_resource type="Texture2D" uid="uid://cltqr8lscp6yk" path="res://textures/texture2.tres" id="2_1bvp3"]
[ext_resource type="Texture2D" uid="uid://0pt2gqmbim0q" path="res://textures/texture1.tres" id="3_lquwl"]
[ext_resource type="Texture2D" uid="uid://1eaojdul3w76" path="res://textures/texture4.tres" id="5_lquwl"]
[ext_resource type="Texture2D" uid="uid://8uttoilui1ff" path="res://icon.svg" id="6_7mycd"]

[sub_resource type="Shader" id="Shader_272bh"]
code = "shader_type canvas_item;

uniform sampler2D tex:source_color,filter_linear_mipmap;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	COLOR = textureLod(tex,UV,3);
	// Called for every pixel the material is visible on.
}

//void light() {
//	// Called for every pixel for every light affecting the CanvasItem.
//	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5vw27"]
shader = SubResource("Shader_272bh")
shader_parameter/tex = ExtResource("2_1bvp3")

[sub_resource type="Gradient" id="Gradient_7mycd"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_272bh"]
gradient = SubResource("Gradient_7mycd")
width = 256
height = 256

[sub_resource type="DrawableTexture2D" id="DrawableTexture2D_7mycd"]

[sub_resource type="GDScript" id="GDScript_7mycd"]
script/source = "@tool
extends Sprite2D

func _ready() -> void:
	var tex_drawable = DrawableTexture2D.new()
	tex_drawable.setup(Vector2i(256,256),RenderingServer.TEXTURE_DRAWABLE_FORMAT_RGBA8_SRGB)
	tex_drawable.blit_texture_rect_region(load(\"res://icon.svg\"),Rect2(10,10,128,128),Rect2(0,0,256,256),Color.WHITE,RenderingServer.TEXTURE_DRAWABLE_BLEND_CLEAR,Color())
	tex_drawable.blit_texture_rect(load(\"res://icon.svg\"),Rect2(0,0,50,50),Color.RED,RenderingServer.TEXTURE_DRAWABLE_BLEND_ADD,Color())
	texture=tex_drawable
"

[sub_resource type="Shader" id="Shader_lquwl"]
code = "		shader_type mesh_rasterizer;

		uniform vec2 dst_size;
		uniform vec2 src_size;
		uniform vec2 dst_offset;
		uniform vec2 src_offset;
		uniform vec2 dst_region;
		uniform vec2 src_region;
		uniform sampler2D src_tex: source_color,repeat_enable;
		uniform vec4 modulate: source_color = vec4(1.0);

		void vertex(){
			POSITION.xy = dst_region / dst_size * POSITION.xy + (dst_offset - dst_size + dst_region) / dst_size;
		}

		void fragment(){
			vec2 uv = src_region / src_size * UV + src_offset / src_size;
			OUTPUT_COLOR = modulate * texture(src_tex, uv);
		}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7mycd"]
shader = SubResource("Shader_lquwl")
shader_parameter/dst_size = Vector2(256, 256)
shader_parameter/src_size = Vector2(128, 128)
shader_parameter/dst_offset = Vector2(64, 64)
shader_parameter/src_offset = Vector2(64, 64)
shader_parameter/dst_region = Vector2(128, 128)
shader_parameter/src_region = Vector2(256, 256)
shader_parameter/src_tex = ExtResource("6_7mycd")
shader_parameter/modulate = Color(1, 1, 1, 1)

[sub_resource type="QuadMesh" id="QuadMesh_272bh"]
size = Vector2(2, 2)

[sub_resource type="RasterizedMeshTexture" id="RasterizedMeshTexture_5vw27"]
clear_color = Color(0, 0, 0, 1)
mesh = SubResource("QuadMesh_272bh")
material = SubResource("ShaderMaterial_7mycd")

[sub_resource type="Shader" id="Shader_7mycd"]
code = "shader_type canvas_item;

uniform sampler2DArray tex_array: source_color,filter_nearest_mipmap;

void vertex() {
}

void fragment() {
	if(UV.x<0.5&&UV.y<0.5){
		COLOR = textureLod(tex_array,vec3(UV*2.0,0),4);
	} else if(UV.x>=0.5&&UV.y<0.5){
		vec2 uv_ofs = UV;
		uv_ofs.x-=0.5;
		COLOR = textureLod(tex_array,vec3(uv_ofs*2.0,1),4);
	}else if (UV.x<0.5&&UV.y>=0.5){
		vec2 uv_ofs = UV;
		uv_ofs.y-=0.5;
		COLOR = texture(tex_array,vec3(uv_ofs*2.0,2),2.0);
	} else if (UV.x>=0.5&&UV.y>=0.5){
		vec2 uv_ofs = UV;
		uv_ofs-=0.5;
		COLOR = texture(tex_array,vec3(uv_ofs*2.0,3),0.0);
	}
}
"

[sub_resource type="DrawableTexture2DArray" id="DrawableTexture2DArray_272bh"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_272bh"]
shader = SubResource("Shader_7mycd")
shader_parameter/tex_array = SubResource("DrawableTexture2DArray_272bh")

[sub_resource type="GDScript" id="GDScript_272bh"]
script/source = "@tool
extends ColorRect

func _ready() -> void:
	var tex_arr = DrawableTexture2DArray.new()
	tex_arr.setup(Vector2i(256,256),4,TextureLayered.LAYERED_TYPE_2D_ARRAY,RenderingServer.TEXTURE_DRAWABLE_FORMAT_RGBA8_SRGB, true)
	tex_arr.blit_texture_rect(load(\"res://icon.svg\"),Rect2(0,0,256,256),Color.WHITE,RenderingServer.TEXTURE_DRAWABLE_BLEND_CLEAR,Color(),0)
	tex_arr.blit_texture_rect(load(\"res://icon.svg\"),Rect2(0,0,50,50),Color.RED,RenderingServer.TEXTURE_DRAWABLE_BLEND_CLEAR,Color(),1)
	tex_arr.blit_texture_rect_region(load(\"res://icon.svg\"),Rect2(10,10,128,128),Rect2(64,64,128,128),Color.BLUE,RenderingServer.TEXTURE_DRAWABLE_BLEND_CLEAR,Color(),2)
	tex_arr.blit_texture_rect(load(\"res://icon.svg\"),Rect2(0,0,50,50),Color.GREEN,RenderingServer.TEXTURE_DRAWABLE_BLEND_CLEAR,Color(0.952, 0.446, 0.624, 1.0),3)
	tex_arr.generate_mipmaps(0);
	tex_arr.generate_mipmaps(1);
	tex_arr.generate_mipmaps(2);
	#tex_arr.generate_mipmaps(3);
	(material as ShaderMaterial).set_shader_parameter(\"tex_array\",tex_arr)
"

[node name="Node2D" type="Node2D"]

[node name="Node3D" parent="." instance=ExtResource("1_lquwl")]

[node name="MipmapsTest" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_5vw27")
position = Vector2(797, 164)
texture = SubResource("GradientTexture2D_272bh")

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(262, 187)
texture = ExtResource("3_lquwl")

[node name="Noise" type="Sprite2D" parent="."]
position = Vector2(1095, 885)
texture = ExtResource("5_lquwl")

[node name="Texture1" type="Sprite2D" parent="."]
position = Vector2(1036, 495)
texture = ExtResource("1_7mycd")

[node name="Sprite2D2" type="Sprite2D" parent="."]
position = Vector2(236, 503)
texture = SubResource("DrawableTexture2D_7mycd")
script = SubResource("GDScript_7mycd")

[node name="Sprite2D3" type="Sprite2D" parent="."]
position = Vector2(490, 533)
texture = SubResource("RasterizedMeshTexture_5vw27")

[node name="LayeredTest" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_272bh")
offset_left = 887.0
offset_top = 112.0
offset_right = 1143.0
offset_bottom = 368.0
script = SubResource("GDScript_272bh")
